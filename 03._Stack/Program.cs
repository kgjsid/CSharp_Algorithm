namespace _03._Stack
{
    class Program
    {
        // 스택?

        // 효율보다 용도? -> 데이터들의 입출력 순서를 결정하기 위해서 사용한다
        // 박스를 생각(입구와 출구가 하나) -> 데이터들을 저장하면 차곡차곡 쌓이게 되고
        // -> 데이터를 꺼내기 위해선 차례대로 하나씩 꺼내야 하는 구조
        // A -> B -> C 순서로 데이터를 집어넣으면 꺼낼 땐 C -> B -> A 순
        // 선입후출(FILO) -> 먼저 들어가면 나중에 나온다 or 후입선출(LIFO) -> 나중에 들어가면 먼저 나온다


        // 스택 (Stack)

        // 선입후출(FILO), 후입선출(LIFO) 방식의 자료구조
        // 가장 최신 입력된 순서대로 처리해야 하는 상황에 이용


        // 스택의 활용

        // UI구조에 사용할 수 있음(설정 창)
        // 설정 창에서 뒤로가기 누를 때 처음으로 돌아가는 것이 아닌 이전 창으로 돌아감
        // ex) 타이틀 -> 설정 -> 사운드 -> 사운드세팅
        // 뒤로가기 누르면 처음이 아닌 그 전의 화면으로 돌아감

        // 혹은 턴제게임 -> 4개의 캐릭터의 행동 설정


        // <스택 구현>
        // 스택은 리스트를 사용법만 달리하여 구현 가능
        //
        // - 삽입 -
        //         top                      top
        //          ↓                        ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│ │ │ │  =>  │1│2│3│4│5│6│ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘
        //
        // - 삭제 -
        //           top                  top
        //            ↓                    ↓
        // ┌─┬─┬─┬─┬─┬─┬─┬─┐      ┌─┬─┬─┬─┬─┬─┬─┬─┐
        // │1│2│3│4│5│6│ │ │  =>  │1│2│3│4│5│ │ │ │
        // └─┴─┴─┴─┴─┴─┴─┴─┘      └─┴─┴─┴─┴─┴─┴─┴─┘

        static void Main(string[] args)
        {
            // Stack 클래스를 활용하여 스택 자료구조를 이용
            Stack<int> stack = new Stack<int>();

            // 데이터 삽입
            // 1. Push
            for(int i = 0; i < 5; i++)
            {
                stack.Push(i); // 0 -> 1 -> 2 -> 3 -> 4 순으로 집어넣기
            }

            // Peek : 최상단 출력하기(맨 위의 데이터 확인하기)
            Console.WriteLine(stack.Peek());

            // 데이터 꺼내기
            // 1. Pop
            // 2. TryPop
            for(int i = 0; i < 3; i++)
            {
                int value = stack.Pop(); 
                Console.WriteLine(value);
                // 꺼낼 땐 마지막 부터 4 -> 3 -> 2 순으로 빠져나옴

                // TryPop : 만약 스택에 데이터가 있다면 꺼내라
                //stack.TryPop(out value);
            }

            for(int i = 5; i < 10; i++)
            {
                stack.Push(i); // 0 -> 1 -> 5 -> 6 -> 7 -> 8 -> 9 순으로 쌓여 있음
            }

            // stack.Count : 현재 스택에 들어가 있는 데이터의 수
            while(stack.Count > 0)
            { 
                int value = stack.Pop();
                Console.WriteLine(value);
                // 9 -> 8 -> 7 -> 6 -> 5 -> 1 -> 0순으로 빠져 나옴
            }
        }
    }
}
